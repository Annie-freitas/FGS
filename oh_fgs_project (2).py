# -- coding: utf-8 --
"""OH-FGS  Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7vmzYncGBP226UiQpgEo9lBgZeJD1wQ

IMPORT LIBRARIES
"""
# 2. Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# 3. Load dataset (upload your Excel file when prompted)
import streamlit as st
import pandas as pd

uploaded_file = st.file_uploader("Upload OH-FGS Excel file", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.write(df.head())
else:
    st.warning("Please upload an Excel file")

# 4. Feature Selection (One Health Approach)
# Key variables from your dataset + engineered features
one_health_features = [
    # Human Health
    'n_ShInfection',       # Primary target (binary: outbreak if >50)
    'mean_ShEgg',          # Egg burden (continuous)
    'n_female',            # FGS risk group
    'Pop',                 # Population density

    # Environmental
    'LakeYN',              # Lake presence (binary)
    'distance',            # Proximity to water (meters)
    'FloatingVeg',         # Snail habitat indicator
    'Depth',               # Water depth (snail survival)
    'width_shore',         # Shoreline width (transmission zone)

    # Animal/Vector
    'Bulinus',             # Snail vector count
    'Biomph',              # Alternative snail vector
    'circ_score'           # Water body circularity (snail habitat)
]

# Create new features
df['water_contact_risk'] = np.where(df['distance'] < 1000, 1, 0)  # High risk if <1km to water
df['snail_density'] = df['Bulinus'] + df['Biomph']               # Total snail load

# 5. Prepare data
X = df[one_health_features]
y = np.where(df['n_ShInfection'] > 50, 1, 0)  # Binary outbreak target (1 if >50 cases)

# 6. Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# 7. Train model (Random Forest)
rf_model = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_model.fit(X_train, y_train)

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

xg_model = XGBClassifier(random_state=42)
xg_model.fit(X_train, y_train)

lg_model = LogisticRegression(random_state=42)
lg_model.fit(X_train, y_train)

# 8. Evaluate

#Evaluate Random Forest model
y_pred_rf = rf_model.predict(X_test)
print("Random Forest Model Evaluation:")
print(classification_report(y_test, y_pred_rf))
print(f"AUC-ROC: {roc_auc_score(y_test, rf_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate Decision Tree model
y_pred_dt = dt_model.predict(X_test)
print("Decision Tree Model Evaluation:")
print(classification_report(y_test, y_pred_dt))
print(f"AUC-ROC: {roc_auc_score(y_test, dt_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate XGBoost model
y_pred_xg = xg_model.predict(X_test)
print("\nXGBoost Model Evaluation:")
print(classification_report(y_test, y_pred_xg))
print(f"AUC-ROC: {roc_auc_score(y_test, xg_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate Logistic Regression model
y_pred_lg = lg_model.predict(X_test)
print("\nLogistic Regression Model Evaluation:")
print(classification_report(y_test, y_pred_lg))
print(f"AUC-ROC: {roc_auc_score(y_test, lg_model.predict_proba(X_test)[:, 1]):.2f}")

# 9. Feature Importance
plt.figure(figsize=(10, 6))
sns.barplot(x=rf_model.feature_importances_, y=one_health_features)
plt.title("One Health Feature Importance")
plt.show()

import seaborn as sns
df['risk_score'] = lg_model.predict_proba(X)[:, 1]

# Now, the heatmap code should work
# Pivot table: Village x Site risk scores
heatmap_data = df.pivot_table(index='Village', columns='Site',
                             values='risk_score', aggfunc='mean')

# Plot
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, annot=True, cmap="YlOrRd",
            linewidths=0.5, cbar_kws={'label': 'Risk Score'})
plt.title("Schisto Risk by Village and Site")
plt.show()

import pickle

# Save the model
chosen_model = lg_model
with open('schisto_risk_model.pkl', 'wb') as f:
    pickle.dump(chosen_model, f)

print("LGR model saved as schisto_risk_model.pkl")

def send_stakeholder_alerts(village_data, risk_level):
    # Single recipient (modify this to your target email)
    recipient_email = "freitasannie7@gmail.com"

    # Compose the alert message
    message = f"""
    üö® SCHISTOSOMIASIS ALERT - {village_data['Village']} üö®
    Risk Level: {risk_level}
    Risk Score: {village_data['risk_score']:.2f}

    üìç Location: Site {village_data['Site']}
    üìä Metrics:
    - Infected Individuals: {village_data['n_ShInfection']}
    - Bulinus Snail Count: {village_data['Bulinus']}
    - Water Contact Risk: {village_data['distance']}m from village

    ‚ö† Recommended Actions:
    {generate_intervention_plan(village_data)}

    üìÖ Next Assessment: {pd.Timestamp.now() + pd.Timedelta(days=7)}
    """

    # Send only one email
    send_email(recipient_email, f"SCHISTO ALERT: {risk_level} Risk Detected", message)

    # Optional: Log the alert (no SMS or emergency protocols)
    print(f"üìß Alert sent to {recipient_email} for {village_data['Village']}")

import pandas as pd
import numpy as np

# Track Intervention Effectiveness
def evaluate_impact(baseline, follow_up):
    improvement = {
        'Risk Reduction': baseline['risk_score'] - follow_up['risk_score'],
        'Case Reduction': (baseline['n_ShInfection'] - follow_up['n_ShInfection'])/baseline['n_ShInfection']*100,
        'Snail Reduction': (baseline['Bulinus'] - follow_up['Bulinus'])/baseline['Bulinus']*100
    }
    return improvement

# Example Report
# Replace 'Diokhor' with an actual Village name from your dataset (e.g., 'Diokhor ')
baseline = df[df['Village']=='Diokhor '].iloc[0]
follow_up = baseline.copy()  # Replace with actual follow-up data
follow_up.update({'risk_score': baseline['risk_score']*0.6,
                 'n_ShInfection': baseline['n_ShInfection']*0.7,
                 'Bulinus': baseline['Bulinus']*0.5})

print("üìà Intervention Effectiveness:")
st.dataframe(pd.DataFrame([evaluate_impact(baseline, follow_up)]))

# -- coding: utf-8 --
import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
from io import BytesIO

# ============================================
# APP CONFIGURATION
# ============================================
st.set_page_config(
    page_title="OH-FGS Risk Prediction System",
    page_icon="ü¶†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# CUSTOM STYLING
# ============================================
def load_css():
    st.markdown("""
    <style>
        /* Main container */
        .main {
            background-color: #f8f9fa;
        }
        
        /* Titles */
        .title-text {
            color: #2c3e50;
            font-weight: 700;
        }
        
        /* Cards */
        .card {
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        /* Risk indicators */
        .risk-high { background-color: #ff6b6b; color: white; padding: 10px; border-radius: 5px; }
        .risk-medium { background-color: #ffd166; color: #2c3e50; padding: 10px; border-radius: 5px; }
        .risk-low { background-color: #06d6a0; color: white; padding: 10px; border-radius: 5px; }
        
        /* Buttons */
        .stButton>button {
            background-color: #3498db;
            color: white;
            border-radius: 5px;
            padding: 8px 16px;
            border: none;
        }
        
        /* Form elements */
        .stTextInput>div>div>input, .stNumberInput>div>div>input {
            background-color: #f0f2f6;
            border-radius: 5px;
        }
        
        /* Tabs */
        .stTabs [data-baseweb="tab-list"] {
            gap: 10px;
        }
        
        .stTabs [data-baseweb="tab"] {
            padding: 10px 20px;
            border-radius: 5px 5px 0 0;
        }
    </style>
    """, unsafe_allow_html=True)

load_css()

# ============================================
# MODEL MANAGEMENT
# ============================================
@st.cache_resource
def load_model():
    try:
        with open('schisto_risk_model.pkl', 'rb') as f:
            return pickle.load(f)
    except Exception as e:
        st.error(f"‚ö†Ô∏è Model loading failed: {str(e)}")
        st.info("Please ensure 'schisto_risk_model.pkl' exists in the app directory")
        return None

# ============================================
# CORE FUNCTIONS
# ============================================
def predict_risk(input_data):
    model = load_model()
    if not model:
        return None, None
    
    try:
        features = [
            'n_ShInfection', 'mean_ShEgg', 'n_female', 'Pop', 'LakeYN',
            'distance', 'FloatingVeg', 'Depth', 'width_shore', 'Bulinus',
            'Biomph', 'circ_score'
        ]
        
        X = pd.DataFrame([input_data])[features]
        proba = model.predict_proba(X)[0][1]
        risk_level = "High" if proba > 0.7 else "Medium" if proba > 0.3 else "Low"
        return risk_level, proba
    except Exception as e:
        st.error(f"üî¥ Prediction error: {str(e)}")
        return None, None

def get_interventions(risk_level):
    interventions = {
        "High": [
            "Immediate mass drug administration (MDA)",
            "Intensive snail control measures",
            "Community-wide health education",
            "Water source improvement",
            "Weekly monitoring"
        ],
        "Medium": [
            "Targeted treatment of high-risk groups",
            "Focal snail control",
            "Health education sessions",
            "Improved sanitation",
            "Monthly monitoring"
        ],
        "Low": [
            "Health education in schools",
            "Passive surveillance",
            "Environmental modification",
            "Quarterly monitoring"
        ]
    }
    return interventions.get(risk_level, [])

# ============================================
# PAGE COMPONENTS
# ============================================
def show_sidebar():
    with st.sidebar:
        st.image("https://via.placeholder.com/150x50?text=OH-FGS", width=150)
        st.markdown("## Navigation")
        page = st.radio("", ["Individual Assessment", "Bulk Processing", "Data Management"])
        
        st.markdown("---")
        st.markdown("### About")
        st.info("""
        OH-FGS Risk Prediction System v1.0  
        Developed for Schistosomiasis Control  
        ¬© 2023 Public Health Initiative
        """)
        
        return page

def individual_assessment():
    st.markdown("## üßë‚Äç‚öïÔ∏è Individual Case Assessment")
    with st.expander("‚ÑπÔ∏è Instructions", expanded=False):
        st.write("Complete all fields below to assess schistosomiasis outbreak risk for a specific location.")
    
    with st.form("assessment_form"):
        cols = st.columns(2)
        
        with cols[0]:
            st.markdown("### Location Details")
            village = st.text_input("Village Name", "Diokhor")
            site = st.text_input("Site Number", "1")
            date = st.date_input("Assessment Date", datetime.today())
            
            st.markdown("### Health Indicators")
            n_ShInfection = st.number_input("Number of Infections", min_value=0, value=5)
            mean_ShEgg = st.number_input("Mean Egg Count", min_value=0.0, value=2.5, step=0.1)
            n_female = st.number_input("Female Population", min_value=0, value=15)
            pop = st.number_input("Total Population", min_value=0, value=100)
        
        with cols[1]:
            st.markdown("### Environmental Factors")
            lake_yn = st.selectbox("Lake Present", ["Yes", "No"])
            distance = st.number_input("Distance to Water (m)", min_value=0, value=500)
            floating_veg = st.selectbox("Floating Vegetation", ["Low", "Medium", "High"])
            depth = st.number_input("Water Depth (m)", min_value=0.0, value=1.2, step=0.1)
            width_shore = st.number_input("Shore Width (m)", min_value=0.0, value=8.0, step=0.1)
            
            st.markdown("### Vector Indicators")
            bulinus = st.number_input("Bulinus Snail Count", min_value=0, value=15)
            biomph = st.number_input("Biomph Snail Count", min_value=0, value=3)
            circ_score = st.slider("Water Circularity Score", 0.0, 1.0, 0.6, step=0.01)
        
        if st.form_submit_button("üöÄ Assess Risk", use_container_width=True):
            input_data = {
                'n_ShInfection': n_ShInfection,
                'mean_ShEgg': mean_ShEgg,
                'n_female': n_female,
                'Pop': pop,
                'LakeYN': 1 if lake_yn == "Yes" else 0,
                'distance': distance,
                'FloatingVeg': ["Low", "Medium", "High"].index(floating_veg) + 1,
                'Depth': depth,
                'width_shore': width_shore,
                'Bulinus': bulinus,
                'Biomph': biomph,
                'circ_score': circ_score,
                'Village': village,
                'Site': site,
                'Date': date.strftime('%Y-%m-%d')
            }
            
            with st.spinner("Analyzing risk factors..."):
                risk_level, risk_proba = predict_risk(input_data)
                
                if risk_level:
                    st.session_state.current_assessment = {
                        **input_data,
                        'Risk_Level': risk_level,
                        'Risk_Probability': risk_proba
                    }
                    
                    # Display results
                    st.markdown("---")
                    st.markdown("## üìä Risk Assessment Results")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown(f"### Risk Level: <span class='risk-{risk_level.lower()}'>{risk_level}</span>", 
                                   unsafe_allow_html=True)
                        st.metric("Probability", f"{risk_proba:.1%}")
                        
                    with col2:
                        st.metric("Village", village)
                        st.metric("Site", site)
                    
                    # Show interventions
                    st.markdown("---")
                    st.markdown("## üõ°Ô∏è Recommended Interventions")
                    for intervention in get_interventions(risk_level):
                        st.markdown(f"‚úÖ {intervention}")
                    
                    # Add to session data
                    if 'submitted_data' not in st.session_state:
                        st.session_state.submitted_data = pd.DataFrame()
                    
                    new_entry = pd.DataFrame([st.session_state.current_assessment])
                    st.session_state.submitted_data = pd.concat(
                        [st.session_state.submitted_data, new_entry],
                        ignore_index=True
                    )

def bulk_processing():
    st.markdown("## üìÅ Bulk Data Processing")
    with st.expander("‚ÑπÔ∏è Instructions", expanded=False):
        st.write("Upload an Excel or CSV file containing multiple records for batch processing.")
    
    uploaded_file = st.file_uploader(
        "Choose a file", 
        type=["xlsx", "csv"],
        accept_multiple_files=False,
        key="bulk_uploader"
    )
    
    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.xlsx'):
                df = pd.read_excel(uploaded_file)
            else:
                df = pd.read_csv(uploaded_file)
            
            # Validate columns
            required_cols = [
                'n_ShInfection', 'mean_ShEgg', 'n_female', 'Pop', 'LakeYN',
                'distance', 'FloatingVeg', 'Depth', 'width_shore', 'Bulinus',
                'Biomph', 'circ_score'
            ]
            
            missing_cols = [col for col in required_cols if col not in df.columns]
            if missing_cols:
                st.error(f"‚ùå Missing required columns: {', '.join(missing_cols)}")
                return
            
            st.success(f"‚úÖ Successfully loaded {len(df)} records")
            
            if st.button("üîç Analyze All Records", use_container_width=True):
                with st.spinner("Processing records..."):
                    model = load_model()
                    if model:
                        X = df[required_cols]
                        probas = model.predict_proba(X)[:, 1]
                        df['Risk_Probability'] = probas
                        df['Risk_Level'] = pd.cut(
                            probas,
                            bins=[0, 0.3, 0.7, 1],
                            labels=['Low', 'Medium', 'High']
                        )
                        
                        # Add missing metadata
                        for col in ['Village', 'Site', 'Date']:
                            if col not in df.columns:
                                df[col] = "Unknown"
                        
                        st.session_state.submitted_data = df
                        st.success("Analysis complete!")
                        
                        # Show summary
                        st.markdown("---")
                        st.markdown("## üìà Risk Distribution")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.bar_chart(df['Risk_Level'].value_counts())
                        
                        with col2:
                            risk_counts = df['Risk_Level'].value_counts()
                            st.metric("High Risk Sites", risk_counts.get('High', 0))
                            st.metric("Medium Risk Sites", risk_counts.get('Medium', 0))
                            st.metric("Low Risk Sites", risk_counts.get('Low', 0))
                        
                        # Show high risk alerts
                        high_risk = df[df['Risk_Level'] == 'High']
                        if not high_risk.empty:
                            st.warning(f"‚ö†Ô∏è {len(high_risk)} high-risk locations detected!")
                            
                            with st.expander("View High Risk Locations", expanded=False):
                                st.dataframe(high_risk)
            
        except Exception as e:
            st.error(f"‚ùå Error processing file: {str(e)}")

def data_management():
    st.markdown("## üíæ Data Management")
    
    if 'submitted_data' not in st.session_state or st.session_state.submitted_data.empty:
        st.info("‚ÑπÔ∏è No assessment data available. Please complete assessments or upload data.")
        return
    
    st.markdown("### üìã Collected Data")
    st.dataframe(st.session_state.submitted_data, use_container_width=True)
    
    st.markdown("---")
    st.markdown("### üì§ Export Options")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Export as CSV**")
        csv = st.session_state.submitted_data.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download CSV",
            data=csv,
            file_name="schisto_risk_data.csv",
            mime="text/csv",
            use_container_width=True
        )
    
    with col2:
        st.markdown("**Export as Excel**")
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            st.session_state.submitted_data.to_excel(writer, index=False)
        st.download_button(
            label="Download Excel",
            data=output.getvalue(),
            file_name="schisto_risk_data.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )

# ============================================
# MAIN APP
# ============================================
def main():
    st.markdown("<h1 class='title-text'>üåç OH-FGS Schistosomiasis Risk Prediction System</h1>", 
               unsafe_allow_html=True)
    
    current_page = show_sidebar()
    
    if current_page == "Individual Assessment":
        individual_assessment()
    elif current_page == "Bulk Processing":
        bulk_processing()
    elif current_page == "Data Management":
        data_management()

if __name__ == "__main__":
    main()
