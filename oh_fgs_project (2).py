# -*- coding: utf-8 -*-
"""OH-FGS  Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7vmzYncGBP226UiQpgEo9lBgZeJD1wQ

IMPORT LIBRARIES
"""

# 2. Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# 3. Load dataset (upload your Excel file when prompted)
import streamlit as st
import pandas as pd

uploaded_file = st.file_uploader("Upload OH-FGS Excel file", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.write(df.head())
else:
    st.warning("Please upload an Excel file")

# 4. Feature Selection (One Health Approach)
# Key variables from your dataset + engineered features
one_health_features = [
    # Human Health
    'n_ShInfection',       # Primary target (binary: outbreak if >50)
    'mean_ShEgg',          # Egg burden (continuous)
    'n_female',            # FGS risk group
    'Pop',                 # Population density

    # Environmental
    'LakeYN',              # Lake presence (binary)
    'distance',            # Proximity to water (meters)
    'FloatingVeg',         # Snail habitat indicator
    'Depth',               # Water depth (snail survival)
    'width_shore',         # Shoreline width (transmission zone)

    # Animal/Vector
    'Bulinus',             # Snail vector count
    'Biomph',              # Alternative snail vector
    'circ_score'           # Water body circularity (snail habitat)
]

# Create new features
df['water_contact_risk'] = np.where(df['distance'] < 1000, 1, 0)  # High risk if <1km to water
df['snail_density'] = df['Bulinus'] + df['Biomph']               # Total snail load

# 5. Prepare data
X = df[one_health_features]
y = np.where(df['n_ShInfection'] > 50, 1, 0)  # Binary outbreak target (1 if >50 cases)

# 6. Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# 7. Train model (Random Forest)
rf_model = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_model.fit(X_train, y_train)

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

xg_model = XGBClassifier(random_state=42)
xg_model.fit(X_train, y_train)

lg_model = LogisticRegression(random_state=42)
lg_model.fit(X_train, y_train)

# 8. Evaluate

#Evaluate Random Forest model
y_pred_rf = rf_model.predict(X_test)
print("Random Forest Model Evaluation:")
print(classification_report(y_test, y_pred_rf))
print(f"AUC-ROC: {roc_auc_score(y_test, rf_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate Decision Tree model
y_pred_dt = dt_model.predict(X_test)
print("Decision Tree Model Evaluation:")
print(classification_report(y_test, y_pred_dt))
print(f"AUC-ROC: {roc_auc_score(y_test, dt_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate XGBoost model
y_pred_xg = xg_model.predict(X_test)
print("\nXGBoost Model Evaluation:")
print(classification_report(y_test, y_pred_xg))
print(f"AUC-ROC: {roc_auc_score(y_test, xg_model.predict_proba(X_test)[:, 1]):.2f}")

# Evaluate Logistic Regression model
y_pred_lg = lg_model.predict(X_test)
print("\nLogistic Regression Model Evaluation:")
print(classification_report(y_test, y_pred_lg))
print(f"AUC-ROC: {roc_auc_score(y_test, lg_model.predict_proba(X_test)[:, 1]):.2f}")

# 9. Feature Importance
plt.figure(figsize=(10, 6))
sns.barplot(x=rf_model.feature_importances_, y=one_health_features)
plt.title("One Health Feature Importance")
plt.show()

import seaborn as sns
df['risk_score'] = lg_model.predict_proba(X)[:, 1]

# Now, the heatmap code should work
# Pivot table: Village x Site risk scores
heatmap_data = df.pivot_table(index='Village', columns='Site',
                             values='risk_score', aggfunc='mean')

# Plot
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, annot=True, cmap="YlOrRd",
            linewidths=0.5, cbar_kws={'label': 'Risk Score'})
plt.title("Schisto Risk by Village and Site")
plt.show()

import pickle

# Save the model
chosen_model = lg_model
with open('schisto_risk_model.pkl', 'wb') as f:
    pickle.dump(chosen_model, f)

print("LGR model saved as schisto_risk_model.pkl")

def send_stakeholder_alerts(village_data, risk_level):
    # Single recipient (modify this to your target email)
    recipient_email = "freitasannie7@gmail.com"

    # Compose the alert message
    message = f"""
    üö® SCHISTOSOMIASIS ALERT - {village_data['Village']} üö®
    Risk Level: {risk_level}
    Risk Score: {village_data['risk_score']:.2f}

    üìç Location: Site {village_data['Site']}
    üìä Metrics:
    - Infected Individuals: {village_data['n_ShInfection']}
    - Bulinus Snail Count: {village_data['Bulinus']}
    - Water Contact Risk: {village_data['distance']}m from village

    ‚ö†Ô∏è Recommended Actions:
    {generate_intervention_plan(village_data)}

    üìÖ Next Assessment: {pd.Timestamp.now() + pd.Timedelta(days=7)}
    """

    # Send only one email
    send_email(recipient_email, f"SCHISTO ALERT: {risk_level} Risk Detected", message)

    # Optional: Log the alert (no SMS or emergency protocols)
    print(f"üìß Alert sent to {recipient_email} for {village_data['Village']}")

import pandas as pd
import numpy as np

# Track Intervention Effectiveness
def evaluate_impact(baseline, follow_up):
    improvement = {
        'Risk Reduction': baseline['risk_score'] - follow_up['risk_score'],
        'Case Reduction': (baseline['n_ShInfection'] - follow_up['n_ShInfection'])/baseline['n_ShInfection']*100,
        'Snail Reduction': (baseline['Bulinus'] - follow_up['Bulinus'])/baseline['Bulinus']*100
    }
    return improvement

# Example Report
# Replace 'Diokhor' with an actual Village name from your dataset (e.g., 'Diokhor ')
baseline = df[df['Village']=='Diokhor '].iloc[0]
follow_up = baseline.copy()  # Replace with actual follow-up data
follow_up.update({'risk_score': baseline['risk_score']*0.6,
                 'n_ShInfection': baseline['n_ShInfection']*0.7,
                 'Bulinus': baseline['Bulinus']*0.5})

print("üìà Intervention Effectiveness:")
st.dataframe(pd.DataFrame([evaluate_impact(baseline, follow_up)]))

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score

# Set page config
st.set_page_config(
    page_title="AI OH-FGS Predict",
    page_icon="ü¶†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
        .high-risk { background-color: #ffcccc; padding: 10px; border-radius: 5px; }
        .medium-risk { background-color: #fff3cd; padding: 10px; border-radius: 5px; }
        .low-risk { background-color: #d4edda; padding: 10px; border-radius: 5px; }
        .stNumberInput > div > div > input {background-color: #f0f2f6;}
        .stTextInput > div > div > input {background-color: #f0f2f6;}
    </style>
""", unsafe_allow_html=True)

# Load your actual training data and train models
@st.cache_resource
def load_models_and_data():
    # Load your actual training data
    df = pd.read_excel('OH-FGS.xlsx')  # Replace with your actual data loading method
    
    # Feature engineering
    one_health_features = [
        'n_ShInfection', 'mean_ShEgg', 'n_female', 'Pop', 'LakeYN',
        'distance', 'FloatingVeg', 'Depth', 'width_shore', 'Bulinus',
        'Biomph', 'circ_score'
    ]
    
    df['water_contact_risk'] = np.where(df['distance'] < 1000, 1, 0)
    df['snail_density'] = df['Bulinus'] + df['Biomph']
    
    X = df[one_health_features]
    y = np.where(df['n_ShInfection'] > 50, 1, 0)
    
    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)
    
    # Train models
    models = {
        "Random Forest": RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42),
        "Decision Tree": DecisionTreeClassifier(random_state=42),
        "XGBoost": XGBClassifier(random_state=42),
        "Logistic Regression": LogisticRegression(random_state=42)
    }
    
    for name, model in models.items():
        model.fit(X_train, y_train)
    
    return models, X_train, y_train, one_health_features

def main():
    st.title("ü¶† OH-FGS Risk Prediction System")
    
    # Load models and training data
    models, X_train, y_train, one_health_features = load_models_and_data()
    
    # Data entry form
    with st.form("data_entry_form"):
        st.header("Enter Location Data")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Human Health Factors")
            n_ShInfection = st.number_input("Number of Infections (n_ShInfection)", min_value=0)
            mean_ShEgg = st.number_input("Mean Egg Burden (mean_ShEgg)", min_value=0.0)
            n_female = st.number_input("Number of Females (n_female)", min_value=0)
            Pop = st.number_input("Population Density (Pop)", min_value=0)
            
        with col2:
            st.subheader("Environmental Factors")
            LakeYN = st.selectbox("Lake Presence (LakeYN)", [0, 1], format_func=lambda x: "Yes" if x == 1 else "No")
            distance = st.number_input("Distance to Water (meters)", min_value=0)
            FloatingVeg = st.number_input("Floating Vegetation Index", min_value=0.0)
            Depth = st.number_input("Water Depth", min_value=0.0)
            width_shore = st.number_input("Shoreline Width", min_value=0.0)
            
        st.subheader("Animal/Vector Factors")
        col3, col4 = st.columns(2)
        with col3:
            Bulinus = st.number_input("Bulinus Snail Count", min_value=0)
            Biomph = st.number_input("Biomph Snail Count", min_value=0)
        with col4:
            circ_score = st.number_input("Water Body Circularity Score", min_value=0.0, max_value=1.0)
            village = st.text_input("Village Name")
            site = st.text_input("Site ID")
        
        submitted = st.form_submit_button("Predict Risk")
    
    if submitted:
        try:
            # Create dataframe from input
            input_data = {
                'n_ShInfection': n_ShInfection,
                'mean_ShEgg': mean_ShEgg,
                'n_female': n_female,
                'Pop': Pop,
                'LakeYN': LakeYN,
                'distance': distance,
                'FloatingVeg': FloatingVeg,
                'Depth': Depth,
                'width_shore': width_shore,
                'Bulinus': Bulinus,
                'Biomph': Biomph,
                'circ_score': circ_score,
                'Village': village,
                'Site': site
            }
            
            df = pd.DataFrame([input_data])
            
        
            # Prepare features for prediction
            X = df[one_health_features]
            
            # Get predictions from all models
            for name, model in models.items():
                df[f'{name}_risk_score'] = model.predict_proba(X)[:, 1]
            
            # Display results
            st.success("Prediction completed!")
            
            # Show risk scores
            st.header("Risk Scores")
            risk_cols = [col for col in df.columns if 'risk_score' in col]
            st.dataframe(df[['Village', 'Site'] + risk_cols].style.format("{:.2%}"))
            
            # Risk assessment
            st.header("Risk Assessment")
            selected_model = st.selectbox("Select model for assessment", list(models.keys()))
            
            risk_score = df[f'{selected_model}_risk_score'].values[0]
            
            if risk_score > 0.7:
                risk_level = "High"
                risk_class = "high-risk"
            elif risk_score > 0.3:
                risk_level = "Medium"
                risk_class = "medium-risk"
            else:
                risk_level = "Low" 
                risk_class = "low-risk"
            
            st.markdown(f"""
                <div class="{risk_class}">
                    <h3>Risk Level: {risk_level}</h3>
                    <p>Probability: {risk_score:.1%}</p>
                </div>
            """, unsafe_allow_html=True)
            
            # Show feature importance if available
            if hasattr(models[selected_model], 'feature_importances_'):
                st.header("Feature Importance")
                fig, ax = plt.subplots(figsize=(10, 6))
                sns.barplot(x=models[selected_model].feature_importances_, y=one_health_features, ax=ax)
                ax.set_title(f"{selected_model} Feature Importance")
                st.pyplot(fig)
            
            # Intervention planning
            st.header("Intervention Planning")
            st.write("Based on the risk factors, consider these interventions:")
            
            if risk_level == "High":
                st.write("""
                - Immediate snail control measures
                - Mass drug administration
                - Community education on water contact
                - Improved sanitation infrastructure
                - Regular monitoring
                """)
            elif risk_level == "Medium":
                st.write("""
                - Targeted snail control
                - School-based treatment programs
                - Community awareness campaigns
                - Water source protection
                """)
            else:
                st.write("""
                - Routine surveillance
                - Health education
                - Basic sanitation improvements
                """)
            
            # Model evaluation metrics
            st.header("Model Performance")
            model = models[selected_model]
            y_pred = model.predict(X_train)
            y_proba = model.predict_proba(X_train)[:, 1]
            
            st.text(f"Classification Report:\n{classification_report(y_train, y_pred)}")
            st.metric("Training AUC-ROC Score", f"{roc_auc_score(y_train, y_proba):.2f}")
            
        except Exception as e:
            st.error(f"An error occurred during prediction: {str(e)}")

if __name__ == "__main__":
    main()
